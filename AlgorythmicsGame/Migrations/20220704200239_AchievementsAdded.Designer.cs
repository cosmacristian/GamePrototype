// <auto-generated />
using System;
using AlgorythmicsGame.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlgorythmicsGame.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20220704200239_AchievementsAdded")]
    partial class AchievementsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlgorythmicsGame.Context.GameBadges", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Condititon")
                        .IsRequired();

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("BadgeId");

                    b.ToTable("GameBadges");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.GameBadgesForPlayers", b =>
                {
                    b.Property<int>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BadgeId");

                    b.Property<string>("PlayerId");

                    b.Property<DateTime>("ReceivedOn");

                    b.HasKey("AchievementId");

                    b.HasIndex("BadgeId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameBadgesForPlayers");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.GeneralPlayerStatistics", b =>
                {
                    b.Property<string>("PlayerStatisticsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUser");

                    b.Property<DateTime>("lastMatchDate")
                        .HasColumnName("LastMatchPlayed")
                        .HasColumnType("date");

                    b.Property<long>("points")
                        .HasColumnName("Points")
                        .HasColumnType("bigint");

                    b.HasKey("PlayerStatisticsId");

                    b.HasIndex("ApplicationUser")
                        .IsUnique()
                        .HasFilter("[ApplicationUser] IS NOT NULL");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.OrganizedMatch", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlgorithmId");

                    b.Property<byte?>("Animation")
                        .HasColumnName("DisplayMode")
                        .HasColumnType("tinyint");

                    b.Property<byte>("ArraySize")
                        .HasColumnName("ArraySize")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("InputType")
                        .HasColumnName("InputType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PlayersWaiting")
                        .HasColumnName("PlayersWaiting")
                        .HasColumnType("tinyint");

                    b.Property<string>("SearchTarget")
                        .HasMaxLength(3);

                    b.Property<byte>("Status")
                        .HasColumnName("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("TeacherInput")
                        .HasMaxLength(30);

                    b.Property<string>("player1")
                        .HasMaxLength(50);

                    b.Property<string>("player2")
                        .HasMaxLength(50);

                    b.HasKey("MatchId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.PlayerStatisticsForAlgorithms", b =>
                {
                    b.Property<int>("StatisticId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlgorithmId");

                    b.Property<string>("PlayerId");

                    b.Property<TimeSpan>("bestTimeRecord")
                        .HasColumnName("BestTimeRecord")
                        .HasColumnType("time");

                    b.Property<DateTime>("lastMatchDate")
                        .HasColumnName("LastMatchPlayed")
                        .HasColumnType("date");

                    b.Property<int>("loses")
                        .HasColumnName("LoseCount")
                        .HasColumnType("int");

                    b.Property<int>("singlePlays")
                        .HasColumnName("SinglePlayerCount")
                        .HasColumnType("int");

                    b.Property<int>("victories")
                        .HasColumnName("VictoryCount")
                        .HasColumnType("int");

                    b.HasKey("StatisticId");

                    b.HasIndex("AlgorithmId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStatisticsPerAlgorithms");
                });

            modelBuilder.Entity("AlgorythmicsGame.Models.Algorithm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlgorithmNickname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AlgorithmPicture");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Icon")
                        .IsRequired();

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Algorithms");
                });

            modelBuilder.Entity("AlgorythmicsGame.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateofBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<int>("Grade");

                    b.Property<string>("ITSkills");

                    b.Property<string>("Image");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Studies");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.GameBadgesForPlayers", b =>
                {
                    b.HasOne("AlgorythmicsGame.Context.GameBadges", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AlgorythmicsGame.Context.GeneralPlayerStatistics", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.GeneralPlayerStatistics", b =>
                {
                    b.HasOne("AlgorythmicsGame.Models.ApplicationUser", "Player")
                        .WithOne("Statistics")
                        .HasForeignKey("AlgorythmicsGame.Context.GeneralPlayerStatistics", "ApplicationUser");
                });

            modelBuilder.Entity("AlgorythmicsGame.Context.PlayerStatisticsForAlgorithms", b =>
                {
                    b.HasOne("AlgorythmicsGame.Models.Algorithm", "Algorithm")
                        .WithMany("StatisticsForAlgorithms")
                        .HasForeignKey("AlgorithmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AlgorythmicsGame.Context.GeneralPlayerStatistics", "Player")
                        .WithMany("StatisticsForAlgorithms")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AlgorythmicsGame.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AlgorythmicsGame.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AlgorythmicsGame.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AlgorythmicsGame.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
